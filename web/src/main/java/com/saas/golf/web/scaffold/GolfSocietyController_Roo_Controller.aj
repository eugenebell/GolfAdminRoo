// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saas.golf.web.scaffold;

import com.saas.golf.domain.GolfSociety;
import com.saas.golf.repository.AccountRepository;
import com.saas.golf.repository.CompetitionRepository;
import com.saas.golf.repository.GolfSocietyRepository;
import com.saas.golf.repository.PlayerRepository;
import com.saas.golf.web.scaffold.GolfSocietyController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect GolfSocietyController_Roo_Controller {
    
    @Autowired
    GolfSocietyRepository GolfSocietyController.golfSocietyRepository;
    
    @Autowired
    AccountRepository GolfSocietyController.accountRepository;
    
    @Autowired
    CompetitionRepository GolfSocietyController.competitionRepository;
    
    @Autowired
    PlayerRepository GolfSocietyController.playerRepository;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GolfSocietyController.create(@Valid GolfSociety golfSociety, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, golfSociety);
            return "golfsocietys/create";
        }
        uiModel.asMap().clear();
        golfSocietyRepository.save(golfSociety);
        return "redirect:/golfsocietys/" + encodeUrlPathSegment(golfSociety.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GolfSocietyController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GolfSociety());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (accountRepository.count() == 0) {
            dependencies.add(new String[] { "account", "accounts" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "golfsocietys/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String GolfSocietyController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("golfsociety", golfSocietyRepository.findOne(id));
        uiModel.addAttribute("itemId", id);
        return "golfsocietys/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GolfSocietyController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("golfsocietys", golfSocietyRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / sizeNo, sizeNo)).getContent());
            float nrOfPages = (float) golfSocietyRepository.count() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("golfsocietys", golfSocietyRepository.findAll());
        }
        addDateTimeFormatPatterns(uiModel);
        return "golfsocietys/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GolfSocietyController.update(@Valid GolfSociety golfSociety, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, golfSociety);
            return "golfsocietys/update";
        }
        uiModel.asMap().clear();
        golfSocietyRepository.save(golfSociety);
        return "redirect:/golfsocietys/" + encodeUrlPathSegment(golfSociety.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String GolfSocietyController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, golfSocietyRepository.findOne(id));
        return "golfsocietys/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String GolfSocietyController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GolfSociety golfSociety = golfSocietyRepository.findOne(id);
        golfSocietyRepository.delete(golfSociety);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/golfsocietys";
    }
    
    void GolfSocietyController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("golfSociety_datecreated_date_format", "yyyy-MM-dd hh:mm:ss a");
    }
    
    void GolfSocietyController.populateEditForm(Model uiModel, GolfSociety golfSociety) {
        uiModel.addAttribute("golfSociety", golfSociety);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("accounts", accountRepository.findAll());
        uiModel.addAttribute("competitions", competitionRepository.findAll());
        uiModel.addAttribute("players", playerRepository.findAll());
    }
    
    String GolfSocietyController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
