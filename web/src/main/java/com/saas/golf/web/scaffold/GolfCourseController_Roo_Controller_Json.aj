// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saas.golf.web.scaffold;

import com.saas.golf.domain.GolfCourse;
import com.saas.golf.web.scaffold.GolfCourseController;
import java.math.BigInteger;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect GolfCourseController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> GolfCourseController.showJson(@PathVariable("id") BigInteger id) {
        GolfCourse golfcourse = golfCoursesRepository.findOne(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (golfcourse == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(golfcourse.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> GolfCourseController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<GolfCourse> result = golfCoursesRepository.findAll();
        return new ResponseEntity<String>(GolfCourse.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> GolfCourseController.createFromJson(@RequestBody String json) {
        GolfCourse golfCourse = GolfCourse.fromJsonToGolfCourse(json);
        golfCoursesRepository.save(golfCourse);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> GolfCourseController.createFromJsonArray(@RequestBody String json) {
        for (GolfCourse golfCourse: GolfCourse.fromJsonArrayToGolfCourses(json)) {
            golfCoursesRepository.save(golfCourse);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> GolfCourseController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        GolfCourse golfCourse = GolfCourse.fromJsonToGolfCourse(json);
        if (golfCoursesRepository.save(golfCourse) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> GolfCourseController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (GolfCourse golfCourse: GolfCourse.fromJsonArrayToGolfCourses(json)) {
            if (golfCoursesRepository.save(golfCourse) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> GolfCourseController.deleteFromJson(@PathVariable("id") BigInteger id) {
        GolfCourse golfCourse = golfCoursesRepository.findOne(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (golfCourse == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        golfCoursesRepository.delete(golfCourse);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
