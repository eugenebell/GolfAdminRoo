// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saas.golf.domain;

import com.saas.golf.domain.GolfCourseHole;
import com.saas.golf.domain.GolfCourseHoleDataOnDemand;
import com.saas.golf.domain.ScoreCard;
import com.saas.golf.domain.ScoreCardDataOnDemand;
import com.saas.golf.repository.GolfCourseHoleRepository;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect GolfCourseHoleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GolfCourseHoleDataOnDemand: @Component;
    
    private Random GolfCourseHoleDataOnDemand.rnd = new SecureRandom();
    
    private List<GolfCourseHole> GolfCourseHoleDataOnDemand.data;
    
    @Autowired
    private ScoreCardDataOnDemand GolfCourseHoleDataOnDemand.scoreCardDataOnDemand;
    
    @Autowired
    GolfCourseHoleRepository GolfCourseHoleDataOnDemand.golfCourseHoleRepository;
    
    public GolfCourseHole GolfCourseHoleDataOnDemand.getNewTransientGolfCourseHole(int index) {
        GolfCourseHole obj = new GolfCourseHole();
        setHoleIndex(obj, index);
        setHoleNumber(obj, index);
        setName(obj, index);
        setPar(obj, index);
        setScoreCard(obj, index);
        return obj;
    }
    
    public void GolfCourseHoleDataOnDemand.setHoleIndex(GolfCourseHole obj, int index) {
        Integer holeIndex = new Integer(index);
        if (holeIndex < 1 || holeIndex > 18) {
            holeIndex = 18;
        }
        obj.setHoleIndex(holeIndex);
    }
    
    public void GolfCourseHoleDataOnDemand.setHoleNumber(GolfCourseHole obj, int index) {
        Integer holeNumber = new Integer(index);
        if (holeNumber < 1 || holeNumber > 18) {
            holeNumber = 18;
        }
        obj.setHoleNumber(holeNumber);
    }
    
    public void GolfCourseHoleDataOnDemand.setName(GolfCourseHole obj, int index) {
        String name = "name_" + index;
        if (name.length() > 10) {
            name = name.substring(0, 10);
        }
        obj.setName(name);
    }
    
    public void GolfCourseHoleDataOnDemand.setPar(GolfCourseHole obj, int index) {
        Integer par = new Integer(index);
        if (par < 3 || par > 6) {
            par = 6;
        }
        obj.setPar(par);
    }
    
    public void GolfCourseHoleDataOnDemand.setScoreCard(GolfCourseHole obj, int index) {
        ScoreCard scoreCard = scoreCardDataOnDemand.getRandomScoreCard();
        obj.setScoreCard(scoreCard);
    }
    
    public GolfCourseHole GolfCourseHoleDataOnDemand.getSpecificGolfCourseHole(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        GolfCourseHole obj = data.get(index);
        BigInteger id = obj.getId();
        return golfCourseHoleRepository.findOne(id);
    }
    
    public GolfCourseHole GolfCourseHoleDataOnDemand.getRandomGolfCourseHole() {
        init();
        GolfCourseHole obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return golfCourseHoleRepository.findOne(id);
    }
    
    public boolean GolfCourseHoleDataOnDemand.modifyGolfCourseHole(GolfCourseHole obj) {
        return false;
    }
    
    public void GolfCourseHoleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = golfCourseHoleRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'GolfCourseHole' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<GolfCourseHole>();
        for (int i = 0; i < 10; i++) {
            GolfCourseHole obj = getNewTransientGolfCourseHole(i);
            try {
                golfCourseHoleRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
