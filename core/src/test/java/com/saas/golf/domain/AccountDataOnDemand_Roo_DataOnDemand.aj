// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saas.golf.domain;

import com.saas.golf.domain.Account;
import com.saas.golf.domain.AccountDataOnDemand;
import com.saas.golf.repository.AccountRepository;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AccountDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AccountDataOnDemand: @Component;
    
    private Random AccountDataOnDemand.rnd = new SecureRandom();
    
    private List<Account> AccountDataOnDemand.data;
    
    @Autowired
    AccountRepository AccountDataOnDemand.accountRepository;
    
    public Account AccountDataOnDemand.getNewTransientAccount(int index) {
        Account obj = new Account();
        setAddressOne(obj, index);
        setAddressThree(obj, index);
        setAddressTwo(obj, index);
        setCounty(obj, index);
        setDateCreated(obj, index);
        setEmail(obj, index);
        setFax(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        setMobile(obj, index);
        setPhone(obj, index);
        setTitle(obj, index);
        setTown(obj, index);
        return obj;
    }
    
    public void AccountDataOnDemand.setAddressOne(Account obj, int index) {
        String addressOne = "addressOne_" + index;
        if (addressOne.length() > 60) {
            addressOne = addressOne.substring(0, 60);
        }
        obj.setAddressOne(addressOne);
    }
    
    public void AccountDataOnDemand.setAddressThree(Account obj, int index) {
        String addressThree = "addressThree_" + index;
        if (addressThree.length() > 60) {
            addressThree = addressThree.substring(0, 60);
        }
        obj.setAddressThree(addressThree);
    }
    
    public void AccountDataOnDemand.setAddressTwo(Account obj, int index) {
        String addressTwo = "addressTwo_" + index;
        if (addressTwo.length() > 60) {
            addressTwo = addressTwo.substring(0, 60);
        }
        obj.setAddressTwo(addressTwo);
    }
    
    public void AccountDataOnDemand.setCounty(Account obj, int index) {
        String county = "county_" + index;
        if (county.length() > 60) {
            county = county.substring(0, 60);
        }
        obj.setCounty(county);
    }
    
    public void AccountDataOnDemand.setDateCreated(Account obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void AccountDataOnDemand.setEmail(Account obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 30) {
            email = email.substring(0, 30);
        }
        obj.setEmail(email);
    }
    
    public void AccountDataOnDemand.setFax(Account obj, int index) {
        String fax = "fax_" + index;
        if (fax.length() > 20) {
            fax = fax.substring(0, 20);
        }
        obj.setFax(fax);
    }
    
    public void AccountDataOnDemand.setFirstName(Account obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 30) {
            firstName = firstName.substring(0, 30);
        }
        obj.setFirstName(firstName);
    }
    
    public void AccountDataOnDemand.setLastName(Account obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 30) {
            lastName = lastName.substring(0, 30);
        }
        obj.setLastName(lastName);
    }
    
    public void AccountDataOnDemand.setMobile(Account obj, int index) {
        String mobile = "mobile_" + index;
        if (mobile.length() > 20) {
            mobile = mobile.substring(0, 20);
        }
        obj.setMobile(mobile);
    }
    
    public void AccountDataOnDemand.setPhone(Account obj, int index) {
        String phone = "phone_" + index;
        if (phone.length() > 20) {
            phone = phone.substring(0, 20);
        }
        obj.setPhone(phone);
    }
    
    public void AccountDataOnDemand.setTitle(Account obj, int index) {
        String title = "title_" + index;
        if (title.length() > 8) {
            title = title.substring(0, 8);
        }
        obj.setTitle(title);
    }
    
    public void AccountDataOnDemand.setTown(Account obj, int index) {
        String town = "town_" + index;
        if (town.length() > 60) {
            town = town.substring(0, 60);
        }
        obj.setTown(town);
    }
    
    public Account AccountDataOnDemand.getSpecificAccount(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Account obj = data.get(index);
        BigInteger id = obj.getId();
        return accountRepository.findOne(id);
    }
    
    public Account AccountDataOnDemand.getRandomAccount() {
        init();
        Account obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return accountRepository.findOne(id);
    }
    
    public boolean AccountDataOnDemand.modifyAccount(Account obj) {
        return false;
    }
    
    public void AccountDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = accountRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Account' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Account>();
        for (int i = 0; i < 10; i++) {
            Account obj = getNewTransientAccount(i);
            try {
                accountRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
