// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saas.golf.domain;

import com.saas.golf.domain.GolfCourseDataOnDemand;
import com.saas.golf.domain.GolfCourseIntegrationTest;
import com.saas.golf.repository.GolfCoursesRepository;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect GolfCourseIntegrationTest_Roo_IntegrationTest {
    
    declare @type: GolfCourseIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: GolfCourseIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private GolfCourseDataOnDemand GolfCourseIntegrationTest.dod;
    
    @Autowired
    GolfCoursesRepository GolfCourseIntegrationTest.golfCoursesRepository;
    
    @Test
    public void GolfCourseIntegrationTest.testCount() {
        Assert.assertNotNull("Data on demand for 'GolfCourse' failed to initialize correctly", dod.getRandomGolfCourse());
        long count = golfCoursesRepository.count();
        Assert.assertTrue("Counter for 'GolfCourse' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void GolfCourseIntegrationTest.testFind() {
        GolfCourse obj = dod.getRandomGolfCourse();
        Assert.assertNotNull("Data on demand for 'GolfCourse' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'GolfCourse' failed to provide an identifier", id);
        obj = golfCoursesRepository.findOne(id);
        Assert.assertNotNull("Find method for 'GolfCourse' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'GolfCourse' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void GolfCourseIntegrationTest.testFindAll() {
        Assert.assertNotNull("Data on demand for 'GolfCourse' failed to initialize correctly", dod.getRandomGolfCourse());
        long count = golfCoursesRepository.count();
        Assert.assertTrue("Too expensive to perform a find all test for 'GolfCourse', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<GolfCourse> result = golfCoursesRepository.findAll();
        Assert.assertNotNull("Find all method for 'GolfCourse' illegally returned null", result);
        Assert.assertTrue("Find all method for 'GolfCourse' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void GolfCourseIntegrationTest.testFindEntries() {
        Assert.assertNotNull("Data on demand for 'GolfCourse' failed to initialize correctly", dod.getRandomGolfCourse());
        long count = golfCoursesRepository.count();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<GolfCourse> result = golfCoursesRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
        Assert.assertNotNull("Find entries method for 'GolfCourse' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'GolfCourse' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void GolfCourseIntegrationTest.testSave() {
        Assert.assertNotNull("Data on demand for 'GolfCourse' failed to initialize correctly", dod.getRandomGolfCourse());
        GolfCourse obj = dod.getNewTransientGolfCourse(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'GolfCourse' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'GolfCourse' identifier to be null", obj.getId());
        golfCoursesRepository.save(obj);
        Assert.assertNotNull("Expected 'GolfCourse' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void GolfCourseIntegrationTest.testDelete() {
        GolfCourse obj = dod.getRandomGolfCourse();
        Assert.assertNotNull("Data on demand for 'GolfCourse' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'GolfCourse' failed to provide an identifier", id);
        obj = golfCoursesRepository.findOne(id);
        golfCoursesRepository.delete(obj);
        Assert.assertNull("Failed to remove 'GolfCourse' with identifier '" + id + "'", golfCoursesRepository.findOne(id));
    }
    
}
