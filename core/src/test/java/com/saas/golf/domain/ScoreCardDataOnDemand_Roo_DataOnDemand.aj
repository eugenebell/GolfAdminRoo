// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.saas.golf.domain;

import com.saas.golf.domain.ScoreCard;
import com.saas.golf.domain.ScoreCardDataOnDemand;
import com.saas.golf.repository.ScoreCardRepository;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ScoreCardDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ScoreCardDataOnDemand: @Component;
    
    private Random ScoreCardDataOnDemand.rnd = new SecureRandom();
    
    private List<ScoreCard> ScoreCardDataOnDemand.data;
    
    @Autowired
    ScoreCardRepository ScoreCardDataOnDemand.scoreCardRepository;
    
    public ScoreCard ScoreCardDataOnDemand.getNewTransientScoreCard(int index) {
        ScoreCard obj = new ScoreCard();
        setCourseLengthMeters(obj, index);
        setCourseLengthYards(obj, index);
        setCourseMap(obj, index);
        setDateCreated(obj, index);
        setName(obj, index);
        setPar(obj, index);
        setTeeColor(obj, index);
        return obj;
    }
    
    public void ScoreCardDataOnDemand.setCourseLengthMeters(ScoreCard obj, int index) {
        Integer courseLengthMeters = new Integer(index);
        if (courseLengthMeters < 1000) {
            courseLengthMeters = 1000;
        }
        obj.setCourseLengthMeters(courseLengthMeters);
    }
    
    public void ScoreCardDataOnDemand.setCourseLengthYards(ScoreCard obj, int index) {
        Integer courseLengthYards = new Integer(index);
        if (courseLengthYards < 1000) {
            courseLengthYards = 1000;
        }
        obj.setCourseLengthYards(courseLengthYards);
    }
    
    public void ScoreCardDataOnDemand.setCourseMap(ScoreCard obj, int index) {
        byte[] courseMap = String.valueOf(index).getBytes();
        obj.setCourseMap(courseMap);
    }
    
    public void ScoreCardDataOnDemand.setDateCreated(ScoreCard obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void ScoreCardDataOnDemand.setName(ScoreCard obj, int index) {
        String name = "name_" + index;
        if (name.length() > 20) {
            name = name.substring(0, 20);
        }
        obj.setName(name);
    }
    
    public void ScoreCardDataOnDemand.setPar(ScoreCard obj, int index) {
        Integer par = new Integer(index);
        if (par < 68 || par > 74) {
            par = 74;
        }
        obj.setPar(par);
    }
    
    public void ScoreCardDataOnDemand.setTeeColor(ScoreCard obj, int index) {
        String teeColor = "teeColor_" + index;
        if (teeColor.length() > 20) {
            teeColor = teeColor.substring(0, 20);
        }
        obj.setTeeColor(teeColor);
    }
    
    public ScoreCard ScoreCardDataOnDemand.getSpecificScoreCard(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ScoreCard obj = data.get(index);
        BigInteger id = obj.getId();
        return scoreCardRepository.findOne(id);
    }
    
    public ScoreCard ScoreCardDataOnDemand.getRandomScoreCard() {
        init();
        ScoreCard obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return scoreCardRepository.findOne(id);
    }
    
    public boolean ScoreCardDataOnDemand.modifyScoreCard(ScoreCard obj) {
        return false;
    }
    
    public void ScoreCardDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = scoreCardRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ScoreCard' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ScoreCard>();
        for (int i = 0; i < 10; i++) {
            ScoreCard obj = getNewTransientScoreCard(i);
            try {
                scoreCardRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
